;-------------------------------------------------------------------------------
; morasm2.s43 (originally from book "MSP430 uC Basics") - sends dots and dashes
; Software delay routine with down loop for 0.1s
; Bug: gives very brief flash between letters
; Message stored as string in ROM with loop in main routine
; Registers in main routine: R5 used as loop counter, 
;       R12 to pass delay to subroutine
; MSPEXP-430G2 Eval Board, LED1,2 active HIGH on P1.0,P1.6
;-------------------------------------------------------------------------------

#include <msp430g2553.h>                     ; #define controlled include file

; Pins for LED on port 1 
LED1             EQU         BIT0
LED2             EQU         BIT6
; Iterations of delay loop for about 0.1s (3 cycles/iteration)
DELAYLOOPS       EQU         27000
; Durations of symbols for morse code in units of 0.1s
; LETTER gives gap between letters; ENDTX terminates message
DOT              EQU         2
DASH             EQU         6
SPACE            EQU         2 
LETTER           EQU         0
ENDTX            EQU         0xFF
;-------------------------------------------------------------------------------
    RSEG         CSTACK                     ; Creat stack (in RAM)
;-------------------------------------------------------------------------------
    RSEG         CODE                       ; Program goes in code memory
Reset:                                      ; Execution starts here
    mov.w        #SFE(CSTACK),SP            ; Initialize stack pointer
main:                                       ; Equivalent to start of main() in C
    mov.w        #WDTPW|WDTHOLD,&WDTCTL     ; Stop watchdog timer
    bic.b        #LED1,&P1OUT               ; Preload LED1 off
    bis.b        #LED1,&P1DIR               ; Set LED1 to output
    clr.w        R5             ; Initialize counter to step through message
    jmp          MessageTest    ; Jump to test so it is evaluated first
MessageLoop: 
    bis.b        #LED1,&P1OUT               ; LED1 on
    mov.b        Message(R5),R12            ; Load duration of delay as param
    call         #DelayTenths               ; call subroutine, don't forget #
    bic.b        #LED1,&P1OUT               ; LED1 off
    mov.w        #SPACE,R12                 ; Load duration of delay (space_
    call         #DelayTenths               ; call subroutine
    inc.w        R5                         ; Next symbol to send
MessageTest: 
    cmp.b        #ENDTX,Message(R5)         ; Reached end of message? 
    jne          MessageLoop                ; No: continue around loop
InfLoop:                                    ; Yes: Loop forever
    jmp          InfLoop                    ; around infinite, empty loop
;-------------------------------------------------------------------------------
; Subroutine to give delay of R12*0.1s
; Parameter is passed in R12 and destroyed
; R4 is used for loop counter but is not saved and restored
; Works correctly if R12 = 0: the test is executed first as in while(){}
;-------------------------------------------------------------------------------
DelayTenths: 
    jmp          LoopTest                   ; Start with test in case R12 = 0
OuterLoop:
    mov.w        #DELAYLOOPS,R4             ; Initialize loop counter
DelayLoop:                                  ; [clock cycles in brackets] 
    dec.w        R4                         ; Decrement loop counter [1]
    jnz          DelayLoop                  ; Repeat loop if not zero [2]
    dec.w        R12                        ; Decrement number of 0.1s delays
LoopTest:
    cmp.w        #0,R12                     ; Have we finished number of delays? 
    jnz          OuterLoop                  ; No: go around delay loop again
    ret                                     ; Yes: return to caller
;-------------------------------------------------------------------------------
    RSEG         DATA16_C                   ; Segment for constant data in ROM
Message:
    DB           DOT,DOT,DOT,LETTER
    DB           DASH,DASH,DASH,LETTER
    DB           DOT,DOT,DOT,ENDTX
;-------------------------------------------------------------------------------
    RSEG         RESET                      ; Segment for reset vector
    DW           Reset                      ; Address to start execution
    END
 
